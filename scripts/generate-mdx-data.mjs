// filepath: scripts/generate-mdx-data.mjs
import { readdir, readFile, writeFile, stat, mkdir } from "node:fs/promises";
import { join, parse } from "node:path";
import matter from "gray-matter";

const coursesPath = join(process.cwd(), "courses");
const outputPath = join(process.cwd(), "src/app/utils/mdx-data.js");
const coursesOutputPath = join(process.cwd(), "src/app/content/courses");

async function generateMdxData() {
  const courseSlugs = await readdir(coursesPath);
  // Structure to hold all course and lesson data
  const allData = {
    // Stores course metadata and a list of its lesson metadata
    courses: {},
    // Stores lesson metadata and content, nested by course slug then lesson slug
    lessons: {},
  };

  for (const courseSlug of courseSlugs) {
    const courseDirPath = join(coursesPath, courseSlug);

    try {
      const stats = await stat(courseDirPath);
      if (!stats.isDirectory()) continue; // Skip if not a directory

      // Process course index.mdx for course metadata
      const courseIndexPath = join(courseDirPath, "index.mdx");
      let courseMetadata = null;
      try {
        const courseIndexSource = await readFile(courseIndexPath, "utf8");

        const { data } = matter(courseIndexSource);
        courseMetadata = data;
        allData.courses[courseSlug] = { metadata: courseMetadata, lessons: [] };
        allData.lessons[courseSlug] = {}; // Initialize lessons object for the course
      } catch (e) {
        console.warn(
          `Warning: Could not read index.mdx for course ${courseSlug}. Skipping course. Error: ${e.message}`
        );
        continue; // Skip this course if index.mdx is missing or unreadable
      }

      // Process lesson .mdx files
      const files = await readdir(courseDirPath);
      for (const file of files) {
        if (file === "index.mdx" || !file.endsWith(".mdx")) continue;

        const lessonSlug = parse(file).name;
        const filePath = join(courseDirPath, file);
        const source = await readFile(filePath, "utf8");

        const { data: lessonMetadata, content: lessonContent } = matter(source);

        // Store lesson metadata
        allData.lessons[courseSlug][lessonSlug] = {
          metadata: lessonMetadata,
        };
        // Add lesson metadata to the course's lesson list
        allData.courses[courseSlug].lessons.push(lessonMetadata);

        // Ensure the course-specific output directory exists
        const courseSpecificOutputPath = join(coursesOutputPath, courseSlug);
        await mkdir(courseSpecificOutputPath, { recursive: true });

        await writeFile(
          join(courseSpecificOutputPath, `${lessonSlug}.mdx`),
          lessonContent
        );
        console.log(`Processed lesson ${lessonSlug} for course ${courseSlug}`);
      }

      // Sort lessons by lessonNumber after processing all lessons for the course
      allData.courses[courseSlug].lessons.sort(
        (a, b) => (a.lessonNumber || 0) - (b.lessonNumber || 0)
      );
    } catch (error) {
      console.warn(
        `Warning: Skipping item ${courseSlug} due to error: ${error.message}`
      );
    }
  }

  // Ensure the output directory exists (optional, depends on structure)
  // await mkdir(dirname(outputPath), { recursive: true });

  const outputContent = `// Generated by scripts/generate-mdx-data.mjs\nexport const mdxData = ${JSON.stringify(allData, null, 2)};`;
  await writeFile(outputPath, outputContent);
  console.log(`MDX data generated successfully at ${outputPath}`);
}

generateMdxData().catch((err) => {
  console.error("Error generating MDX data:", err);
  process.exit(1);
});
